Cómo crear un bot de telegram basado en MAS y AWS:

0) Prerrequisitos: Antes de empezar, hay que instalar WSL2 en windows, instalarle VS Code, la extensión a vs code para poder usarlo en WSL, y ahí adentro instalar anaconda, crear un env llamado "mas" en donde tengamos las librerías que necesitamos (incluyendo mas), instalar aws cli y sam cli. Además, hay que haber creado una cuenta de AWS y configurarla con aws configure en la terminal de vscode. También tenemos que haber creado un Telegram Bot usando Bot Father, guardarnos el telegram token. Y también tenemos que haber armado nuestro mas, con un config.json y un api_keys.json (que incluya el telegram token), al menos.

1) Poner todos los archivos principales en un mismo directorio en WSL (config.json, api_keys.json, fns.py).

2) En ese mismo directorio, incluir "requirements.txt" que al menos debe tener estas librerías:

requests
boto3
git+https://github.com/mneuronico/multi-agent-system-library.git

3) Además, incluir lambda_function.py, que será el script principal invocado cuando se recibe un mensaje de Telegram. Acá hay un ejemplo simple de cómo funciona ese script:

import json
import boto3
import os
import requests
from mas import AgentSystemManager

# Replace with your bot token
BUCKET_NAME = "your-bucket-name"

lambda_client = boto3.client('lambda')
s3_client = boto3.client('s3')

# S3 key template for sqlite history files (each file named <chat_id>.sqlite inside "history/" folder)
def s3_sqlite_key(chat_id):
    return f"history/{chat_id}.sqlite"

def lambda_handler(event, context):
    try:
        # Check if this is the initial invocation from Telegram
        if 'body' in event:
            body = json.loads(event['body'])
            chat_id = body['message']['chat']['id']
            text = body['message']['text']

            # Acknowledge the webhook immediately
            response = {
                "statusCode": 200,
                "body": json.dumps({"status": "Message received"})
            }

            # Invoke the same Lambda function asynchronously
            payload = {
                "chat_id": chat_id,
                "text": text
            }
            lambda_client.invoke(
                FunctionName=context.invoked_function_arn,
                InvocationType='Event',
                Payload=json.dumps(payload)
            )
			
            return response
        else:
            # This is the asynchronous invocation for processing

            chat_id = event['chat_id']
            text = event['text']
            process_message(chat_id, text)
            return {
                "statusCode": 200,
                "body": json.dumps({"status": "Message processed"})
            }
    except Exception as e:
        print(f"Error in lambda_handler: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
    
def process_message(chat_id, text):
    try:
        manager = AgentSystemManager(config_json="config.json",
                                     history_folder="/tmp/history",
                                     files_folder="/tmp/files"
        )

    except Exception as e:
        print("Issue while creating the manager:", e)
        return

    # Build the S3 key for the sqlite file for this chat_id
    key = s3_sqlite_key(chat_id)

    try:
        # Try to download the sqlite file from S3
        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=key)
        sqlite_bytes = response['Body'].read()
        # Import the downloaded sqlite file into the manager (it will be saved in /tmp/history/<chat_id>.sqlite)
        manager.import_history(chat_id, sqlite_bytes)
    except s3_client.exceptions.NoSuchKey:
        # No history exists for this chat_id; a new DB will be created when needed
        print(f"No existing history for user {chat_id} found in S3.")
    except Exception as e:
        print("Error retrieving sqlite from S3:", e)

    try:
        # Set the current user in the manager so that history operations use the correct DB file
        manager.set_current_user(chat_id)

        # Run mas
        output = manager.run(
            input=text,
            verbose=True
        )
        
        print("Received output from manager:",output)
    except Exception as e:
        print("Issue while getting response:", e)
        output = {"response": "Sorry, I made a mistake :("}

    try:
		# the telegram bot token must be included in api_keys.json
        TELEGRAM_BOT_TOKEN = manager.get_key("TELEGRAM_TOKEN")
        # Send the output response back to Telegram
        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": output.get("response", "No response")
        }
        requests.post(telegram_url, json=payload)
    except Exception as e:
        print("Issue while sending message to Telegram:", e)

    try:
        # Export the updated sqlite file from the manager and upload it to S3
        new_sqlite_bytes = manager.export_history(chat_id)
        s3_client.put_object(Bucket=BUCKET_NAME, Key=key, Body=new_sqlite_bytes)
    except Exception as e:
        print("Issue while exporting history:", e)
		

4) En el mismo directorio, crear un template.yaml con la configuración de la Lambda Function:

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS SAM Template for a Telegram Bot using the multi-agent system

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 256

    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  YourBotFunction: #set this to whatever function name you'd like
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Description: "Lambda function for the Telegram Bot"
      Architectures:
      - x86_64
      Policies:
        - AWSLambdaBasicExecutionRole  # Allows logging to CloudWatch
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: "arn:aws:s3:::your-bucket-name/*"  # Access to your S3 bucket objects
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction  # For self-invocation
              Resource: "*"
      Environment:
        Variables:
          BUCKET_NAME: "your-bucket-name"
      Events:
        TelegramWebhook:
          Type: Api
          Properties:
            Path: /webhook
            Method: post
  AdaBotS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "your-bucket-name"
	  
5) Y además, un samconfig.toml que guarde la configuración de deployment del código:

version = 0.1
[default]
[default.deploy]
[default.deploy.parameters]
stack_name = "your-stack-name"
s3_bucket = "your-sam-deployment-bucket"
s3_prefix = "your-prefix"
region = "sa-east-1" # esta región tiene que coincidir siempre con la región en la que estamos trabajando en AWS
confirm_changeset = true
capabilities = "CAPABILITY_IAM"

6) Necesitamos otro S3 bucket, que no es el mismo que usamos para guardar el historial, sino que este lo usamos para guardar el código -> your-sam-deployment-bucket. Para crearlo, usamos este comando en la terminal de VS code en WSL:

aws s3 mb s3://your-sam-deployment-bucket --region sa-east-1

7) En la consola de vs code, en el directorio donde están todos nuestros archivos, correr:

sam build

Si todo sale bien, debería aparecer una carpeta nueva dentro de ese directorio llamada .aws-sam.

8) Deploy desde vs code:

sam deploy --guided

Esto va a comenzar un proceso en el que se van a pedir varios datos. Muchos de esos ya están incluídos en samconfig.toml y aparecen entre corchetes como default. Se puede apretar enter para dejar el default. Hay que poner que sí a allow SAM CLI IAM role creation. Está todo bien con que la función no tenga autenticación. Está bien guardar los argumentos al config file samconfig.toml, y dejar el default configuration environment. Después hay que confirmar el deployment y esperar un ratito.

9) Ahora hay que encontrar la URL del endpoint de la API Gateway. Esta es la URL a la que Telegram le va a mandar los mensajes, y que va a conectar esos mensajes con nuestra función Lambda. Para encontrar la URL, hay que ir al servicio API Gateway en la consola web de AWS -> https://sa-east-1.console.aws.amazon.com/console/home?region=sa-east-1 (ojo, cambiar la región por la que corresponda)
Ahí, elegimos la API que corresponda a nuestro stack.
En el menú izquierdo, vamos a API settings.
La URL que está debajo de "Default endpoint" es la que estamos buscando.

10) Ahora tenemos que decirle a Telegram que mande los mensajes de nuestro bot a esa URL. Para eso, en cualquier navegador web pegamos esta URL:

https://api.telegram.org/bot<YOUR_TELEGRAM_BOT_TOKEN>/setWebhook?url=<YOUR_API_GATEWAY_URL>

Reemplazando el telegram token por el de nuestro bot y la URL de la API Gateway por la que acabamos de conseguir.

Si anda bien, deberíamos ver una página con este JSON:

{"ok":true,"result":true,"description":"Webhook was set"}

11) Habilitar logs en VS Code: Para saber qué es lo que está pasando durante la ejecución del bot, conviene habilitar los logs de la lambda function en VS Code. Para eso, hay que ir al AWS Explorer en VS Code. Elegir la región correcta, ir a Lambda, al nombre de nuestra Lambda, click derecho, tail logs, enter. Si no funciona a la primera, mandar un mensaje al bot y volver a abrir el tail logs.

12) Listo, si todo anduvo bien, el bot debería estar respondiendo y deberíamos ver los logs.

13) Para editar el bot, solo hace falta cambiar los archivos (fns.py, config.py, api_keys.json o el lambda_function.py). Hecho eso, en el directorio principal, en la consola de vs code desde WSL:

sam build

sam deploy

Eso debería ser suficiente para que la función esté actualizada.

Si da este error:

Error: Cannot use both --resolve-s3 and --s3-bucket parameters in non-guided deployments. Please use only one or use the --guided option for a guided deployment.

correr sam deploy --guided o sacar resolve_s3 = true de samconfig.toml.
